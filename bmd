#!/bin/python3
import argparse
import os
import sys
import re
from subprocess import PIPE, STDOUT, Popen, run
import errno
from pathlib import Path

BOOKMARKS_PATH = os.environ["HOME"] + "/.bookmarks"
BROWSER = os.environ["BROWSER"]


def create_bm_file():
    ok = Path(BOOKMARKS_PATH).touch()


def jump_to_section(section, reader):
    for line in reader:
        if line.strip() == f"[{section}]":
            return True
    return False


def iterate_entries(reader):
    current_section = "item"
    for line in reader:
        if line.startswith('['):
            current_section = line[1:-2]
            yield f"#{current_section}"
        else:
            name, _ = split_bm_line(line)
            if name:
                yield f"{name} #{current_section}"


def silent_run(*command):
    with open(os.devnull, "w") as shutup:
        run(command)


def open_urls(urls):
    if BROWSER:
        silent_run(BROWSER, *urls)
    else:
        silent_run("exo-open", *urls)


def open_url_by_name(name, reader):
    url = get_url_by_name(name, reader)
    if not url:
        return False
    open_urls([url])
    return True


def open_urls_by_query(query, reader):
    query = query.strip()
    if query.startswith("#"):
        urls = iterate_urls_in_section(query[1:], reader)
        if urls:
            open_urls(urls)
            return True
        else:
            return False
    else:
        bm_name = query.split('#', 1)[0].strip()
        url = get_url_by_name(bm_name, reader)
        if url:
            open_urls([url])
            return True
        else:
            return False


def iterate_urls_in_section(section, reader):
    ok = jump_to_section(section, reader)
    for line in reader:
        if line.startswith('['):
            break
        _, url = split_bm_line(line)
        if url:
            yield url


def iterate_bookmarks_in_section(section, reader):
    ok = jump_to_section(section, reader)
    for line in reader:
        if line.startswith('['):
            break
        name, _ = split_bm_line(line)
        if name:
            yield name


def get_url_by_name(bookmark_name, reader):
    for line in reader:
        if line.startswith('['):
            continue
        name, url = split_bm_line(line)
        if name == bookmark_name:
            return url
    return None


def split_bm_line(line):
    delimeter_candidates = [
        line.find(':'),
        line.find('=')
    ]
    if delimeter_candidates[0] == -1 and \
       delimeter_candidates[1] == -1:
        return None, None
    elif delimeter_candidates[0] == -1:
        split_pos = delimeter_candidates[1]
    elif delimeter_candidates[1] == -1:
        split_pos = delimeter_candidates[0]
    else:
        split_pos = min(delimeter_candidates)
    return line[:split_pos].strip(), line[split_pos+1:].strip()


def add_bookmark(section, name, url):
    with open(BOOKMARKS_PATH) as f:
        lines = f.readlines()
    i = 0
    while i < len(lines) and lines[i].strip() != f"[{section}]":
        i += 1
    if i == len(lines):
        lines.append(f"[{section}]\n")
    lines.insert(i + 1, f"{name}: {url}\n")
    with open(BOOKMARKS_PATH, 'w') as f:
        f.write(''.join(lines))


####################### MAIN #######################
parser = argparse.ArgumentParser(description="Simple bookmark manager")
parser.add_argument("-o", "--open", nargs=1,
                    help="open a bookmark or a group", metavar="QUERY")
parser.add_argument("-l", "--list", nargs="?",
                    help="list bookmarks", metavar="SECTION", const="DEFAULT")
parser.add_argument("-d", "--dmenu", action="store_true",
                    help="open dmenu")
parser.add_argument("-a", "--add", nargs=3,
                    help="add a bookmark", metavar=("GROUP", "NAME", "URL"))
parser.add_argument("-c", "--config", nargs=1,
                    help="specify data file", metavar="PATH")
args = parser.parse_args()

if args.config:
    BOOKMARKS_PATH = args.config[0]

count_commands = sum(map(bool, [args.open, args.list, args.dmenu, args.add]))
if count_commands != 1:
    parser.error(f"bm accepts 1 command per call, " f"{count_commands} were given")
    sys.exit()

if not Path(BOOKMARKS_PATH).exists():
    create_bm_file()
    print(f"created new bookmarks file at {BOOKMARKS_PATH}")

if args.open:
    ok = open_urls_by_query(args.open[0], open(BOOKMARKS_PATH))
    if not ok:
        parser.error(f'bookmark or section "{args.open[0]}" was not found')

if args.list:
    if args.list == "DEFAULT":
        print('\n'.join(iterate_entries(open(BOOKMARKS_PATH))))
    else:
        print('\n'.join(iterate_bookmarks_in_section(args.list, open(BOOKMARKS_PATH))))

if args.add:
    section, name, url = args.add
    add_bookmark(section, name, url)
    print(f"bookmark \"{name}\" added to group \"{section}\"")

if args.dmenu:
    p = Popen('dmenu', stdin=PIPE, stdout=PIPE)
    bm_reader = open(BOOKMARKS_PATH)
    entries = iterate_entries(bm_reader)
    for line in entries:
        try:
            p.stdin.write(bytes(line + '\n', 'utf-8'))
        except IOError as e:
            if e.errno == errno.EPIPE or e.errno == errno.EINVAL:
                break
            else:
                raise

    output, err = p.communicate()
    output = str(output, "utf-8").strip()

    p.stdin.close()
    p.wait()

    ok = open_urls_by_query(output, open(BOOKMARKS_PATH))
    if not ok:
        parser.error(f'cannot open "{output}"')
        pass
